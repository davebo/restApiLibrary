# Python 2.7
#
# Plutora REST API functions v2.0
#
# Functions
# ---------
# plutoraApi()
#	Make REST API call to Plutora
# getAccessToken()
# 	Returns access_token
# getUserCredentials()
# 	Returns username and password from the command line
# listToDict()
#	Transform a list of multiple field-value pairs into a dictionary of key-value pairs
# guidByPathAndName()
#	Return the GUID of the object at an API path of a given name
#
# Sample test cases
# 	Several examples are provided below.  Change the "if False" to "if True" to
#   enable the example.  Where GUIDs are included in the examples, these need
#   to be modified to reflect the Plutora instance being used.
#
if True:	#-------Customizations------------------------
			# Default user presented at the command line
			defaultUser='user@company.com'

			# US Demo API keys
			client_id='XXXXXXXXXXXXXXXXXXXXXXXXXX'
			client_secret='YYYYYYYYYYYYYYYYYYYYYYYYYY'

			# Plutora REST API URLs
			authUrl = "https://usoauth.plutora.com/"
			baseUrl = "https://usapi.plutora.com/"
			#-------End of Customizations-----------------
			pass # NOP to end section
if True:	# ------Imports and functions-----------------
			import json
			import requests
			import getpass
			import csv
			import datetime
			import os.path
			import glob
			import sys

			def plutoraApi(access_token, baseUrl, verb, api, data):
				# Make REST API call to Plutora
				#
				# access_token
				# 	get this from getAccessToken()
				# baseUrl
				#	US: https://usapi.plutora.com/
				#	UK: https://ukapi.plutora.com/
				#	AU: https://auapi.plutora.com/
				# verb
				#	GET
				#	PUT
				#	POST
				#	DELETE
				# api
				#	systems
				#	systems/{id}
				#	etc, see https://usapi.plutora.com/help
				# data
				#	For GET and DELETE: ""
				#	For PUT and POST: Object that gets rendered as JSON by this function using json.dumps()
				#		obj = [
				#				{
				#					"name":"abc",
				#					"field1":"2.0"
				#				},
				#				{
				#					"name":"xyz",
				#					"field1":"3.0"
				#				}
				#			]
				#	
				# If successful, Returns: "" or JSON-formatted response
				# On failure, Returns: response text
				#
				fullUrl = baseUrl + api
				headers={}
				headers['authorization']="bearer " + access_token
				headers['content-type']="application/json"
				headers['cache-control'] = "no-cache"
				response = requests.request(verb, fullUrl, data=json.dumps(data), headers=headers)
				if not response.ok:
					print(response.text)
				if response.text:
					responseJson=response.json()
				else:
					responseJson=""
				return responseJson

			def getUserCredentials(defaultUser):
				# Prompts user for username then password (no echo)
				#
				# Returns: username and password from the command line
				username = raw_input( 'Enter your Plutora userid [' + defaultUser + ']: ' )
				username = username or defaultUser
				password = getpass.getpass('Password: ')
				return username,password

			def getAccessToken(authUrl, client_id, client_secret, username, password):
				# Returns access_token
				#
				# authUrl:
				#	https://usoauth.plutora.com/
				# client_id & client_secret
				#	Values generated by Plutora platform, see Customizations>API
				# username & password
				#	User credentials used to access the Plutora platform
				#
				# If successful, Returns: "" or JSON-formatted response
				# On failure, Returns: response text
				#
				headers = {}
				headers['content-type'] = "application/x-www-form-urlencoded"
				headers['cache-control'] = "no-cache"
				url = authUrl + "oauth/token"
				payload  = "client_id=" + client_id + '&'
				payload += "client_secret=" + client_secret + '&'
				payload += "grant_type=" + 'password&'
				payload += "username=" + username.replace('@','%40') + '&'
				payload += "password=" + password + '&'
				response = requests.request("POST", url, data=payload, headers=headers)
				if not response.ok:
					print "Access token: "
					print(response.text)
					exit()
				access_token = response.json()['access_token']
				return access_token
			# ------End of def getAccessToken()-----------	
			# ------def listToDict()--------------------------
			def listToDict(list, key, value):
				# Transform a list of multiple field-value pairs into a dictionary of key-value pairs
				# IN: [{"a":"x","b":"y","c":"z"...},{"a":"xx","b":"yy","c":"zz"...}]
				# If key = "b" and value = "c"
				# OUT: {"y":"z","yy":"zz",...}
				keyValPairs = {}
				for element in list:
					keyValPairs[element[key]]=element[value]
				return keyValPairs
			# ------End of def guidByPathAndName()-------------
			def guidByPathAndName(path, name):
				## Return the GUID of the object at an API path of a given name
				# Get all objects at API path location
				objects = plutoraApi(access_token, baseUrl, "GET", path, "")
				# Transform list in to name_n:guid_n dictionary
				guidList=listToDict(objects, "name", "id")
				return guidList[name]
			# ------End of def guidByPathAndName()---------------
			# ------End of Imports and functions----------
			pass # NOP to end section
if True:	# ------Runtime: Get API access token---------

			# Get user credentials from the command line
			username,password = getUserCredentials(defaultUser)

			# Get an access_token for subsequent API calls
			access_token=getAccessToken(authUrl, client_id, client_secret, username, password)
			# ------End of Runtime: Get API access token--
			pass # NOP to end section


# Test cases for functions

if False: # Set test value to True to run example
	## Get list of System names with GET
	systems = plutoraApi(access_token, baseUrl, "GET", "systems", "")
	for system in systems:
		print system['name']

if False: # Set test value to True to run example
	# Look up a system GUID by system name
	systems = plutoraApi(access_token, baseUrl, "GET", "systems", "")
	# Get the name of an existing System
	firstSystemName=systems[0]['name']
	sysGuidList=listToDict(systems,"name","id")
	# Show only first found GUID for System name (Plutor allows for multiple Systems with the same name)
	print "GUID for System name " + firstSystemName + " = " + sysGuidList[firstSystemName]

if False: # Set test value to True to run example
	# Look up a GUID by API path and object name
	apiPath = "organizations"
	# Get the name of an existing organization
	orgName = plutoraApi(access_token, baseUrl, "GET", apiPath, "")[0]['name']
	objectGuid = guidByPathAndName(apiPath, orgName)
	print "GUID of \"" + orgName + "\" of " + apiPath + " = " + objectGuid
	
if False: # Set test value to True to run example
	## Change values on a System with PUT
	systemApi = "systems/26b65447-0d45-40ae-adb1-051487bcf7bd"
	system = plutoraApi(access_token, baseUrl, "GET", systemApi, "")
	print system['name']
	system['description']="New description from API 2.0"
	# Remove the additionalInformation array from datastructure; these values not affected by PUT systems
	system.pop('additionalInformation', None)
	plutoraApi(access_token, baseUrl, "PUT", systemApi, system)
	print plutoraApi(access_token, baseUrl, "GET", systemApi, system)

if False: # Set test value to True to run example
	## Create a System and Enviroment with POST
	mySys = {
		"Name": "My API System",
		"Vendor": "Plutora",
		"Status": "Active",
		"OrganizationId": "9d3879c9-bb43-4243-afd8-0f1ee6273663"
	}
	sys = plutoraApi(access_token, baseUrl, "POST", "systems", mySys)
	sysApi="systems/" + sys['id']
	print sysApi
	myEnv = {
		"Name": "My API Environment",
		"Vendor": "Plutora",
		"UsageWorkItemId": "fa69ee6d-7218-4002-9fbd-200eadc10e33",
		"EnvironmentStatusId": "b060ed8b-6e3b-454d-af0f-e90938eb7b47",
		"Color": "#ffffff",
		"IsSharedEnvironment": "true"
	}
	myEnv['LinkedSystemId']=sys['id']
	env = plutoraApi(access_token, baseUrl, "POST", "environments", myEnv)
	envApi = "environments/" + env['id']
	print envApi

if False: # Set test value to True to run example
	## Delete an Enviroment with DELETE
	# (Systems are getting removed from the UI, but not the database: https://home.strykaqa.com/defects/P-D-1415)
	sysApi="systems/b929c89a-864e-4bf0-8877-16a5cb66279f"
	print plutoraApi(access_token, baseUrl, "GET", sysApi, "")
	print "Deleting " + sysApi
	print plutoraApi(access_token, baseUrl, "DELETE", sysApi, "")
	print plutoraApi(access_token, baseUrl, "GET", sysApi, "")

if False: # Set test value to True to run example
	## Create Environments from CSV file and document the results in a new CSV file with the Enviroment GUID
	csvFileName = 'envs.csv'
	# Create CSV file if it doesn't already exist
	if not os.path.isfile(csvFileName):
		# Define CSV file column names
		fieldnames = [
			"sysGuid",
			"envName"
			]
		print "Creating CSV file for input"
		csvfile = open(csvFileName, 'w')
		csvfileWriter = csv.DictWriter(csvfile, fieldnames=fieldnames, lineterminator='\n')
		csvfileWriter.writeheader()
		csvfileWriter.writerow({"sysGuid":"b929c89a-864e-4bf0-8877-16a5cb66279f","envName":"System From CSV 1"})
		csvfileWriter.writerow({"sysGuid":"b929c89a-864e-4bf0-8877-16a5cb66279f","envName":"System From CSV 2"})
		csvfile.close()
	else:
		print "Using existing CSV file for input"

	# Load CSV file	
	crEnvFile = open(csvFileName, 'r')
	# Get the field names from the header
	crEnvReader = csv.reader( crEnvFile )
	fieldnames = crEnvReader.next()
	dictReader = csv.DictReader( crEnvFile, fieldnames)
	# Create output file name with timestamp
	outfile = open('envsOut' + '{:%Y%m%d%H%M%S}'.format(datetime.datetime.now()) + '.csv', 'w')
	# TODO: remove the following line...
	dictReader = csv.DictReader( crEnvFile, fieldnames)
	# Add envGuid row to outfile
	fieldnames.append('envGuid')
	writer = csv.DictWriter(outfile, fieldnames=fieldnames, lineterminator='\n')
	writer.writeheader()
	
	# Read in each row for processing
	# TODO: Accommodate hierarchical object processing:
	#  Two styles:  
	#	(1) Column values repeated and
	#		col1	col2
	#		top1	vala
	#		top1	valb
	#		top2	valc
	#
	#	(2) First column value then blanks
	#		col1	col2
	#		top1
	#				vala
	#				valb
	#		top2
	#				valc
	
	for row in dictReader:
		myEnv = {
			"Vendor": "Plutora",
			"UsageWorkItemId": "fa69ee6d-7218-4002-9fbd-200eadc10e33",
			"EnvironmentStatusId": "b060ed8b-6e3b-454d-af0f-e90938eb7b47",
			"Color": "#ffffff",
			"IsSharedEnvironment": "true"
		}
		myEnv['name']=row['envName']
		myEnv['LinkedSystemId']=row['sysGuid']
		env = plutoraApi(access_token, baseUrl, "POST", "environments", myEnv)
		envApi = "environments/" + env['id']
		print "Creating " + envApi
		row['envGuid']=env['id']
		writer.writerow(row)
	crEnvFile.close()
		
	
if False: # Set test value to True to run example
	## Delete the Environments created above by loading the CSV which includes the GUIDs to be deleted
	# Assumes there is an envGuid column
	#
	# TODO: debug why script fails if this and the above examples are set to True (each runs fine on own)
		# Loading file: envsOut20170330145538.csv
		# Traceback (most recent call last):
		  # File ".\apiFunctions.py", line 255, in <module>
			# fieldnames = delEnvReader.next()
		# StopIteration
	#
	for file in glob.glob('envsOut*.csv'):
		print "Loading file: " + file
		# Load CSV file	
		delEnvInfile = open(file, 'r')
		delEnvReader = csv.reader( delEnvInfile )
		
		## Capture field names from header row
		fieldnames = delEnvReader.next()
		dictReader = csv.DictReader( delEnvInfile, fieldnames)

		for row in dictReader:
			envApi = "environments/" + row['envGuid']
			print "Deleting " + envApi
			plutoraApi(access_token, baseUrl, "DELETE", envApi, "")
		
		delEnvInfile.close()	